package {{ .Package }}

import (
    "github.com/paynejacob/speakerbob/pkg/graph"
    "github.com/paynejacob/speakerbob/pkg/store"
    "github.com/vmihailenco/msgpack/v5"
    "sync"
    "fmt"
)

const {{ .Name }}ProviderKeyPrefix = "{{ .Package }}.{{ .Name }}"

type {{ .Name }}Provider struct {
    Store store.Store

    mu    sync.RWMutex
    cache map[string]*{{ .Name }}
    index *graph.Graph
}

func New{{ .Name }}Provider(s store.Store) *{{ .Name }}Provider {
    return &{{ .Name }}Provider{
        Store: s,
        mu: sync.RWMutex{},
        cache: map[string]*{{ .Name }}{},
        index: graph.NewGraph(),
    }
}

func (p *{{ .Name }}Provider) Get(k string) *{{ .Name }} {
    p.mu.RLock()
    defer p.mu.RUnlock()

    if o, ok := p.cache[k]; ok {
        return o
    }

    return &{{ .Name }}{}
}

func (p *{{ .Name }}Provider) List() []*{{ .Name }} {
    rval := make([]*{{ .Name }}, 0)

    p.mu.RLock()
    defer p.mu.RUnlock()

    for _, o := range p.cache {
        rval = append(rval, o)
    }

    return rval
}

func (p *{{ .Name }}Provider) Search(query string) []*{{ .Name }} {
    results := make([]*{{ .Name }}, 0)

    p.mu.RLock()
    defer p.mu.RUnlock()

    for _, keyBytes := range p.index.Search([]byte(query)) {
        results = append(results, p.cache[string(keyBytes)])
    }

    return results
}

func (p *{{ .Name }}Provider) Save(o *{{ .Name }}) error {
    p.mu.Lock()
    defer p.mu.Unlock()

    body, err := msgpack.Marshal(o)

    if err = p.Store.Save(get{{ .Name }}Key(o), body); err != nil {
        return err
    }

    p.cache[o.{{ .KeyField }}] = o
    {{ range .IndexedFields }}
    p.index.Write(graph.Tokenize(o.{{ . }}), []byte(o.{{ $.KeyField }}))
    {{end}}
    return nil
}

func (p *{{ .Name }}Provider) Delete(o *{{ .Name }}) error {
    p.mu.Lock()
    defer p.mu.Unlock()

    if err := p.Store.Delete(get{{ .Name }}Key(o)); err != nil {
        return err
    }

    delete(p.cache, o.{{ .KeyField }})
    p.index.Delete([]byte(o.{{ .KeyField }}))

    return nil
}

func (p *{{ .Name }}Provider) Initialize() error {
    p.mu.Lock()
    defer p.mu.Unlock()

    return p.Store.List([]byte({{ .Name }}ProviderKeyPrefix), func(bytes []byte) error {
        o := {{ .Name }}{}

        if err := msgpack.Unmarshal(bytes, &o); err != nil {
            return err
        }

        p.cache[o.{{ .KeyField }}] = &o
        {{ range .IndexedFields }}
        p.index.Write(graph.Tokenize(o.{{ . }}), []byte(o.{{ $.KeyField }}))
        {{end}}
        return nil
    })
}

func get{{ .Name }}Key(o *{{ .Name }}) store.Key {
    return store.Key(fmt.Sprintf("%s:%s", {{ .Name }}ProviderKeyPrefix, o.{{ .KeyField }}))
}